cmake_minimum_required(VERSION 3.17.0)
project(LibScikitGPU VERSION 0.1.0)

INCLUDE(CTest)
enable_testing()
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_SOURCE_DIR}/cmake/")
SET(CUDA_SEPARABLE_COMPILATION ON)
# use cuda or not
SET(WITH_CUDA ON)
SET(CMAKE_CXX_FLAGS "-std=c++11 -fPIC ${CMAKE_CXX_FLAGS} ")

# Cpp standard for cuda if set with_cuda to on
IF(WITH_CUDA)
  ENABLE_LANGUAGE(CUDA) 
  SET(CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})
  SET(POSITION_INDEPENDENT_CODE ON)
  SET(CMAKE_CUDA_STANDARD 11)
  SET(CMAKE_CUDA_STANDARD_REQUIRED ON)
  # SET(CMAKE_CUDA_EXTENSIONS OFF)
  # SET_PROPERTY(TARGET foo PROPERTY CUDA_STANDARD 11)
  SET(CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS}" )
ENDIF(WITH_CUDA)

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})
MACRO(SEARCH_SOURCE NAME DIRPRJ)
  FILE(GLOB_RECURSE header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.h)
  FILE(GLOB_RECURSE source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cpp ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.tpp)
  IF(WITH_CUDA)
    FILE(GLOB_RECURSE cuda_header${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cuh)
    FILE(GLOB_RECURSE cuda_source${NAME} ${PROJECT_SOURCE_DIR}/${DIRPRJ}/*.cu)
  ENDIF(WITH_CUDA)
ENDMACRO(SEARCH_SOURCE)

SEARCH_SOURCE(src src)

INCLUDE(CPack)
INCLUDE("${PROJECT_SOURCE_DIR}/cmake/LoadLibs.cmake")

# IF (CUDA_BUILD_EMULATION)
  # SET(CUDA_CUFFT_LIBRARIES ${CUDA_cufftemu_LIBRARY})
  # SET(CUDA_CUBLAS_LIBRARIES ${CUDA_cublasemu_LIBRARY})
# ELSE(CUDA_BUILD_EMULATION)
#   SET(CUDA_CUFFT_LIBRARIES ${CUDA_cufft_LIBRARY})
#   SET(CUDA_CUBLAS_LIBRARIES ${CUDA_cublas_LIBRARY} ${CUDA_cublas_device_LIBRARY})
# ENDIF()

IF(WITH_CUDA)
  SET(CUDA_CUFFT_LIBRARIES ${CUDA_cufftemu_LIBRARY})
  SET(CUDA_CUBLAS_LIBRARIES ${CUDA_cublasemu_LIBRARY})
  CUDA_ADD_LIBRARY(LibScikitGPUCuda SHARED ${cuda_sourcesrc} ${cuda_headersrc})
  # CUDA_ADD_CUBLAS_TO_TARGET(LibScikitGPUCuda)
  IF (CUDA_BUILD_EMULATION)
    TARGET_LINK_LIBRARIES(LibScikitGPUCuda  ${CUDA_cublasemu_LIBRARY})
  ELSE(CUDA_BUILD_EMULATION)
    TARGET_LINK_LIBRARIES(LibScikitGPUCuda  ${CUDA_cublas_LIBRARY} ${CUDA_cublas_device_LIBRARY})
  ENDIF(CUDA_BUILD_EMULATION)
ENDIF(WITH_CUDA)

ADD_LIBRARY(LibScikitGPU SHARED
    ${sourcesrc} ${headersrc})
TARGET_LINK_LIBRARIES(LibScikitGPU ${ALL_LIBRARIES} ${ALL_STATIC_LIBRARIES})


MACRO(ADD_EXE NAME)
  IF(WITH_CUDA)
    IF(EXISTS ${PROJECT_SOURCE_DIR}/Main/${NAME}.cpp)
      CUDA_ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
    ELSE()
      CUDA_ADD_EXECUTABLE(${NAME} Main/${NAME}.cu)
    ENDIF()
    TARGET_LINK_LIBRARIES(${NAME} LibScikitGPU LibScikitGPUCuda ${ALL_STATIC_LIBRARIES})
  ELSE(WITH_CUDA)
    ADD_EXECUTABLE(${NAME} Main/${NAME}.cpp)
    TARGET_LINK_LIBRARIES(${NAME} LibScikitGPU ${ALL_STATIC_LIBRARIES})
  ENDIF(WITH_CUDA)
ENDMACRO(ADD_EXE)

ADD_EXE(main)
ADD_EXE(mainSA)
IF(WITH_CUDA)
  ADD_EXE(matrixMulCUBLAS)
  ADD_EXE(cublas_amax_example)
  ADD_EXE(mainCuda)
  ADD_EXE(mainSACuda)
ENDIF(WITH_CUDA)

SET(CPACK_PROJECT_NAME ${PROJECT_NAME})
SET(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
