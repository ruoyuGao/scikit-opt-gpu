# EIGEN3
FIND_PACKAGE(Eigen3 3.4.0 QUIET)
IF(EIGEN3_FOUND)
 MESSAGE(STATUS "Found EIGEN3 @ ${EIGEN3_INCLUDE_DIR}")
 INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})
ELSE(EIGEN3_FOUND)
 IF(EXISTS ${PROJECT_BINARY_DIR}/eigen)
 ELSE()
   EXECUTE_PROCESS(COMMAND git clone -b 3.4 https://gitlab.com/libeigen/eigen.git WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
 ENDIF()
 MESSAGE(STATUS "Using EIGEN3 @ ${PROJECT_BINARY_DIR}/eigen") 
 SET(EIGEN3_INCLUDE_DIR ${PROJECT_BINARY_DIR}/eigen)
 FIND_PACKAGE(Eigen3 QUIET REQUIRED)
 INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})
ENDIF(EIGEN3_FOUND)


# IF(EXISTS ${PROJECT_BINARY_DIR}/eigen)
# ELSE()
#   EXECUTE_PROCESS(COMMAND git clone https://gitlab.com/libeigen/eigen.git WORKING_DIRECTORY ${PROJECT_BINARY_DIR})
# ENDIF()
# MESSAGE(STATUS "Using EIGEN3 @ ${PROJECT_BINARY_DIR}/eigen")
# SET(EIGEN3_INCLUDE_DIR ${PROJECT_BINARY_DIR}/eigen)
# FIND_PACKAGE(Eigen3 QUIET REQUIRED)
# INCLUDE_DIRECTORIES(${EIGEN3_INCLUDE_DIR})

#Cuda
IF(WITH_CUDA)
  IF(NOT CUDA_TOOLKIT_ROOT_DIR)
    SET(CUDA_TOOLKIT_ROOT_DIR "/usr/local/stow/cuda-11.4")
  ENDIF()
  FIND_PACKAGE(CUDA QUIET)
  IF(CUDA_FOUND)
    INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
    MESSAGE(STATUS "Found CUDA @ ${CUDA_INCLUDE_DIRS}")
    LIST(APPEND ALL_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_cublas_LIBRARY} ${CUDA_cusolver_LIBRARY})
    ADD_DEFINITIONS(-DWITH_CUDA)
  ELSE(CUDA_FOUND)
    MESSAGE(WARNING "Cannot find CUDA, compiling without it!")
    SET(WITH_CUDA OFF)
  ENDIF(CUDA_FOUND)
ENDIF()